apply plugin: 'com.novoda.bintray-release'
apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compile_sdk_version

    defaultConfig {
        minSdkVersion rootProject.ext.min_sdk_version
        targetSdkVersion rootProject.ext.target_sdk_version
        versionCode rootProject.ext.base_version_code
        versionName rootProject.ext.base_version_name

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //noinspection GradleDependency
    implementation "com.android.support:recyclerview-v7:${rootProject.ext.support_recyclerview_version}"
    implementation "com.android.support:support-annotations:${rootProject.ext.support_annotations_version}"
    testImplementation "junit:junit:${rootProject.ext.junit_version}"
    androidTestImplementation("com.android.support.test:runner:${rootProject.ext.runner_version}") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support.test', module: 'monitor'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${rootProject.ext.espresso_core_version}"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    //noinspection GroovyAccessibility
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def user = properties.getProperty("bintray.user")
def key = properties.getProperty("bintray.apikey")
publish {
    repoName = 'AndroidComponent'
    userOrg = 'dovsnier'
    groupId = 'com.dvsnier'
    artifactId = 'base'
    publishVersion = rootProject.ext.base_version_name
    desc = "the android lib that version is ${rootProject.ext.base_version_name}"
    website = REPOSITORY_SITE_URL
    repository = REPOSITORY_GIT_URL
    autoPublish = true
    bintrayUser = user
    bintrayKey = key
}
