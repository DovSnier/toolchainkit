// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'dependencies.gradle'
//apply plugin: 'maven'

buildscript {

    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
//        maven {
//            url MAVEN_REPO_URL
//        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${build_gradle_version}"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
//        classpath "com.github.dcendents:android-maven-gradle-plugin:${android_maven_gradle_plugin_version}"
//        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${gradle_bintray_plugin_version}"
        classpath "com.novoda:bintray-release:${bintray_release_version}"
    }
}

allprojects {
    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        mavenCentral()
        mavenLocal()
        google()
        jcenter()
//        maven {
//            url MAVEN_REPO_URL
//        }
    }

    afterEvaluate { project ->
        if (project.getTasksByName("releaseAndroidJavadocs", false).size() > 0) {
            project.getTasksByName("releaseAndroidJavadocs", false)[0].enabled = false
        }
        def log = new File("./log/src/main/java")
//        if (!log.exists()) {
//            log.mkdirs()
//        }
        log.mkdirs()
        file("./log/src/main/java/project_task_list.log").withWriter { w ->
            w.write("the project property:\n\n")
            project.properties.each {
                w.write(it.getKey() + "\n")
//                w.write(it.getValue() + "\n")
            }
            w.close()
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
        file("./log/src/main/java/gradle_task_list.txt").withWriter { w ->
            tasks.forEach() {
                w.write(it.getName() + "\n")
            }
            w.close()
        }
    }

    tasks.withType(Javadoc) {
//        options.addStringOption('Xdoclint:none', '-quiet')
//        options.addStringOption('encoding', 'UTF-8')
//        options.addStringOption('charSet', 'UTF-8')
        options {
            encoding "UTF-8"
            charSet 'UTF-8'
            links "http://docs.oracle.com/javase/7/docs/api"
        }
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
